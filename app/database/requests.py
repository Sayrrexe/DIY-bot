import logging
from collections import Counter

from tortoise.exceptions import DoesNotExist
from app.database.models import Favorite, User, Material, Idea

logger = logging.getLogger(__name__)


# ----- –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ -----------
async def create_user(tg_id: int):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id.
    """
    await User.get_or_create(tg_id=tg_id)


async def is_user_auth(tg_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    """
    try:
        user = await User.get(tg_id=tg_id)
        if user:
            return True
    except DoesNotExist:
        return False


async def delete_my_account(tg_id: int) -> bool:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        user = await User.get(tg_id=tg_id)
        await Favorite.filter(user=user).delete()
        await user.delete()
        return True
    except DoesNotExist:
        return False


async def get_count_user_favorite(tg_id: int):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–¥–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        user = await User.get(tg_id=tg_id)
        if user:
            return await Favorite.filter(user=user).count()
        return False
    except DoesNotExist:
        return False


async def is_idea_favorite(tg_id: int, iid: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω–∞—è –∏–¥–µ—è –∏–∑–±—Ä–∞–Ω–Ω–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        user = await User.get(tg_id=tg_id)
        idea = await Idea.get(id=iid)
        if user:
            is_favorite = await Favorite.get(user=user, idea=idea)
            return bool(is_favorite)
        return False
    except DoesNotExist:
        return False


async def add_to_favorite(tg_id: int, iid: int) -> bool:
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–¥–µ–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
    """
    try:
        user = await User.get(tg_id=tg_id)
        idea = await Idea.get(id=iid)
        is_exist = await Favorite.filter(user=user, idea=idea).exists()
        if not is_exist:
            await Favorite.create(user=user, idea=idea)
        return True
    except DoesNotExist:
        return False


async def delete_favorite(tg_id: int, iid: int) -> bool:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∏–¥–µ–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.
    """
    try:
        user = await User.get(tg_id=tg_id)
        idea = await Idea.get(id=iid)
        favorite_record = await Favorite.filter(user=user, idea=idea).first()
        if favorite_record:
            await favorite_record.delete()
            return True
        return False
    except DoesNotExist:
        return False


async def find_best_matching_ideas(material_list: list):
    """
    –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–¥–µ–π –ø–æ —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
    """
    db_materials = await Material.all()
    db_materials_map = {material.name: material.id for material in db_materials}

    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤ –ë–î
    matching_ids = [db_materials_map[m] for m in material_list if m in db_materials_map]

    if not matching_ids:
        return []

    ideas = await Idea.filter(materials__in=matching_ids).prefetch_related("materials")
    idea_match_counts = Counter(
        idea.id
        for idea in ideas
        for material in idea.materials
        if material.id in matching_ids
    )

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-3 –∏–¥–µ–π
    best_matches = idea_match_counts.most_common(3)
    top_ideas = [await Idea.get(id=idea_id) for idea_id, _ in best_matches]

    return top_ideas


async def revert_idea_to_text(idea_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –∏–¥–µ–∏.
    """
    idea = await Idea.get(id=idea_id)
    text = f"–ò–¥–µ—è: {idea.description}\n\n{idea.instruction}"
    image = idea.image
    if image:
        return text, image
    return text, False


async def get_soap_img(data: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –º—ã–ª–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –≤—ã–±–æ—Ä–∞.
    """
    mapping = {
        "1": "rose",
        "2": "sheet",
        "3": "heart",
        "4": "lavand",
        "5": "green",
        "6": "pink",
    }

    first = data["color"]
    second = data["form"]

    first_name = mapping[second]
    second_name = mapping[first]
    path = f"media/soap/{first_name}/{second_name}.webp"
    return path


async def get_soap_text(data: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º—ã–ª–∞.
    """
    mapping = {
        "1": "–≤ –≤–∏–¥–µ —Ä–æ–∑—ã",
        "2": "–≤ –≤–∏–¥–µ –ª–∏—Å—Ç–∞",
        "3": "–≤ –≤–∏–¥–µ —Å–µ—Ä–¥—Ü–∞",
        "4": "–ª–∞–≤–∞–Ω–¥–æ–≤–æ–≥–æ",
        "5": "–ú—è—Ç–Ω–æ-–∑–µ–ª—ë–Ω–æ–≥–æ",
        "6": "–ù–µ–∂–Ω–æ-—Ä–æ–∑–æ–≤–æ–≥–æ",
        "7": "–≠—Ñ–∏—Ä–Ω—ã—Ö –º–∞—Å–µ–ª",
        "8": "–±–ª—ë—Å—Ç–æ–∫",
        "9": "–ì–ª–∏—Ü–µ—Ä–∏–Ω–∞ –¥–ª—è —É–≤–ª–∞–∂–Ω—è—é—â–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞",
    }

    color = data["color"]
    form = data["form"]
    additives = data["additives"]

    color_text = mapping[color]
    form_text = mapping[form]
    additives_text = mapping[additives]

    text = f"–í–æ—Ç —Ç–∞–∫ –±—ã –≤—ã–≥–ª—è–¥–µ–ª–æ –≤–∞—à–µ –º—ã–ª–æ {form_text}, {color_text} —Ü–≤–µ—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º {additives_text}üî•‚ù§Ô∏è‚Äçüî•"
    return text
