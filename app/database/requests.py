import logging
import re

from typing import List
from webbrowser import get

from tortoise.exceptions import DoesNotExist
from app.database.models import Favorite, User, Material, Idea
from collections import Counter
from tortoise.expressions import Q


logger = logging.getLogger(__name__)


# ----- –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ -----------
async def create_user(tg_id: int):  # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await User.get_or_create(tg_id=tg_id)
    return

async def is_user_auth(tg_id: int):
    try:
        user = await User.get(tg_id=tg_id)
        if user:
            return True
    except DoesNotExist:
        return False

async def delete_my_account(tg_id: int):
    try:
        user = await User.get(tg_id=tg_id)
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        await Favorite.filter(user=user).delete()
        # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user.delete()
        return True
    except DoesNotExist:
        return False

    
async def get_count_user_favorite(tg_id):
    try:
        user = await User.get(tg_id=tg_id)
        if user:
            count = await Favorite.filter(user=user).count()
            return count
        else:
            return False
    except DoesNotExist:
        return False
    
async def is_idea_favorite(tg_id, iid):
    try:
        user = await User.get(tg_id=tg_id)
        idea = await Idea.get(id=iid)
        if user:
            is_favorite = await Favorite.get(user=user, idea=idea)
            if is_favorite:
                return True
            else:
                return False
        else:
            return False
    except DoesNotExist:
        return False
    
async def add_to_favorite(tg_id, iid):
    try:
        user = await User.get(tg_id=tg_id)
        idea = await Idea.get(id=iid)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
        is_exist = await Favorite.filter(user=user, idea=idea).exists()
        if not is_exist:
            await Favorite.create(user=user, idea=idea)
            return True
        else:
            return True  # –£–∂–µ –µ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    except DoesNotExist:
        return False

async def delete_favorite(tg_id, iid):
    try:
        user = await User.get(tg_id=tg_id)
        idea = await Idea.get(id=iid)
        favorite_record = await Favorite.filter(user=user, idea=idea).first()
        if favorite_record:
            await favorite_record.delete()
            return True
        else:
            return False
    except DoesNotExist:
        return False

async def find_best_matching_ideas(material_list):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_materials = await Material.all()
    db_materials_map = {material.name: material.id for material in db_materials}

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏–∑ –ë–î
    matching_ids = [db_materials_map[material] for material in material_list if material in db_materials_map]

    if not matching_ids:
        return []

    # –ù–∞—Ö–æ–¥–∏–º –∏–¥–µ–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–≤–ø–∞–≤—à–∏–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
    ideas = await Idea.filter(materials__in=matching_ids).prefetch_related('materials')

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –∏–¥–µ–∏
    idea_match_counts = Counter(idea.id for idea in ideas for material in idea.materials if material.id in matching_ids)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–¥–µ–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏ –±–µ—Ä—ë–º —Ç–æ–ø-3
    best_matches = idea_match_counts.most_common(3)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ç–æ–ø-3 –∏–¥–µ–π
    top_ideas = [await Idea.get(id=idea_id) for idea_id, _ in best_matches]

    return top_ideas


async def revert_idea_to_text(id: int):
    idea = await Idea.get(id=id)
    text = f'–ò–¥–µ—è: {idea.description}\n\n{idea.instruction}'
    image = idea.image
    if image:
        return text, image
    return text, False

async def get_soap_img(data):
    mapping = {
    '1': 'rose',
    '2': 'sheet',
    '3': 'heart',
    '4': 'lavand',
    '5': 'green',
    '6': 'pink',
    }
    
    first = data['color']  
    second = data['form']
    
    first_name = mapping[second]
    second_name = mapping[first]
    path = f'media/soap/{first_name}/{second_name}.webp'
    return path

async def get_soap_text(data):
    mapping = {
    '1': '–≤ –≤–∏–¥–µ —Ä–æ–∑—ã',
    '2': '–≤ –≤–∏–¥–µ –ª–∏—Å—Ç–∞',
    '3': '–≤ –≤–∏–¥–µ —Å–µ—Ä–¥—Ü–∞',
    '4': '–ª–∞–≤–∞–Ω–¥–æ–≤–æ–≥–æ',
    '5': '–ú—è—Ç–Ω–æ-–∑–µ–ª—ë–Ω–æ–≥–æ',
    '6': '–ù–µ–∂–Ω–æ-—Ä–æ–∑–æ–≤–æ–≥–æ',
    '7': '–≠—Ñ–∏—Ä–Ω—ã—Ö –º–∞—Å–ª–æ–≤',
    '8': '–±–ª—ë—Å—Ç–æ–∫',
    '9': '–ì–ª–∏—Ü–µ—Ä–∏–Ω–∞ –¥–ª—è —É–≤–ª–∞–∂–Ω—è—é—â–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞'
    }
    
    color = data['color']  
    form = data['form']
    additives = data['additives']
    
    color_text = mapping[color]
    form_text = mapping[form]
    additives_text = mapping[additives]
    
    text = f'–í–æ—Ç —Ç–∞–∫ –±—ã –≤—ã–≥–ª—è–¥–µ–ª–æ –≤–∞—à–µ –º—ã–ª–æ {form_text}, {color_text} —Ü–≤–µ—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º {additives_text}üî•‚ù§Ô∏è‚Äçüî•'
    return text
        