from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.database.models import Favorite,Material, User, Question

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
start_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–í–æ–π—Ç–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏) üîì", callback_data="join_to_account"
            )
        ],
        [
            InlineKeyboardButton(
                text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–∏–ª–∏ –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö) ‚è≠Ô∏è", callback_data="skip"
            )
        ],
    ]
)

auth_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è üîì", callback_data="join_to_account"
            )
        ],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è≠Ô∏è", callback_data="skip")],
    ]
)

delete_account_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å ‚ùå", callback_data="submit_delete_account"
            )
        ],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è≠Ô∏è", callback_data="skip")],
    ]
)

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ—é üåü")],
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –º—ã–ª–æ üßº")],
        [KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å üè†")],
    ],
    resize_keyboard=True,
)

empty_kb = ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)


async def profile_kb(tg_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º –∏–¥–µ—è–º–∏.
    """
    keyboard = InlineKeyboardBuilder()
    user = await User.get(tg_id=tg_id)
    list_favorite = await Favorite.filter(user=user).all()
    for favorite in list_favorite:
        idea = await favorite.idea
        keyboard.add(
            InlineKeyboardButton(text=idea.description, callback_data=f"idea_{idea.id}")
        )

    keyboard.add(InlineKeyboardButton(text="–î–æ–º–æ–π üè†", callback_data="skip"))
    keyboard.add(
        InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –º–æ–π –∞–∫–∫–∞—É–Ω—Ç ‚ùå", callback_data="delete_account"
        )
    )
    return keyboard.adjust(1).as_markup()


async def materials_kb() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
    –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî —ç—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –±–∞–∑—ã.
    """
    keyboard = InlineKeyboardBuilder()
    materials = await Material.all()
    callback_prefix = "materials_add"
    counter = 0

    for material in materials:
        counter += 1
        material_name = material.name
        parts = [part.strip() for part in material_name.split(" ") if part.strip()]
        finish_text = ":".join(parts) if len(parts) > 1 else parts[0]
        keyboard.add(
            InlineKeyboardButton(
                text=material_name, callback_data=f"{callback_prefix}_{finish_text}"
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º "–∑–∞–≥–ª—É—à–∫—É" –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫
    if counter % 2 == 1:
        keyboard.add(InlineKeyboardButton(text=" ", callback_data="ignore"))

    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.add(
        InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å ‚óÄÔ∏è", callback_data="clear_materials")
    )
    keyboard.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="skip"))
    keyboard.add(
        InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", callback_data="accept_materials")
    )

    return keyboard.adjust(2).as_markup()


async def ideas_kb(ideas) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–¥–µ–∏.
    """
    keyboard = InlineKeyboardBuilder()
    for idea in ideas:
        keyboard.row(
            InlineKeyboardButton(text=idea.description, callback_data=f"idea_{idea.id}")
        )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.row(
        InlineKeyboardButton(text="–î–æ–º–æ–π üè†", callback_data="skip"),
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="clear_materials"),
    )

    return keyboard.as_markup()


async def favorites_kb(tg_id: int, idea_id: int, status: bool) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–¥–µ–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ,
    –∞ —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    keyboard = InlineKeyboardBuilder()
    user = await User.filter(tg_id=tg_id).first()

    if user:
        if not status:
            keyboard.row(
                InlineKeyboardButton(
                    text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠ê", callback_data=f"favorite_{idea_id}"
                )
            )
        else:
            keyboard.row(
                InlineKeyboardButton(
                    text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ‚ùå‚≠ê",
                    callback_data=f"unfavorite_{idea_id}",
                )
            )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.row(
        InlineKeyboardButton(text="–î–æ–º–æ–π üè†", callback_data="skip"),
        InlineKeyboardButton(text="–ó–∞–Ω–æ–≤–æ üîÑÔ∏è", callback_data="clear_materials"),
    )

    return keyboard.as_markup()


async def get_cb_by_status_questions(status: str) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–ø—Ä–æ—Å–∞.
    """
    keyboard = InlineKeyboardBuilder()

    if status == "color":
        question = await Question.get(id=2).prefetch_related("answers")
        related_answers = await question.answers.all()
        question_id = 1
    elif status == "form":
        question = await Question.get(id=1).prefetch_related("answers")
        related_answers = await question.answers.all()
        question_id = 2
    elif status == "additives":
        question = await Question.get(id=3).prefetch_related("answers")
        related_answers = await question.answers.all()
        question_id = 3
    else:
        related_answers = []
        question_id = None

    for answer in related_answers:
        keyboard.row(
            InlineKeyboardButton(
                text=answer.answer, callback_data=f"answer_{question_id}_{answer.id}"
            )
        )

    return keyboard.as_markup()
