import logging

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
import app.states as st
import app.database.requests as req
from app.utils import clear_text


logger = logging.getLogger(__name__)

user = Router()

materials = []

# ----- /id -----
@user.message(Command('id'))
async def cmd_start(message: Message):
    id = message.from_user.id
    await message.answer(
        f"`{id}`",
        reply_markup=kb.main_kb, parse_mode='MARKDOWN'
    )

# ----- –û–ë–†–ê–ë–û–¢–ö–ê /start -----------
@user.message(CommandStart())
async def cmd_start(message: Message):
    
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!\n–£–∑–Ω–∞—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å –ø–æ–º–æ—â—å—é /help\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è\n–•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–µ–ª–æ–∫?",
        reply_markup=kb.start_kb
    )
    
# ----- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è -----------
@user.callback_query(F.data == 'join_to_account')
async def join_to_account(callback: CallbackQuery):
    await req.create_user(callback.from_user.id)
    await callback.message.answer('–í—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç!üî•', reply_markup = kb.main_kb)
    
@user.callback_query(F.data == 'skip')
async def skip_cmd(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—éüè†!', reply_markup = kb.main_kb)

# ----- –ò–¥–µ—è -----------
@user.message(F.text == '–ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ—éüåü')
async def cmd_get_idea(message: Message):
    await message.delete()
    await message.answer('–ò–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ, —Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å\n–û–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ:\n\n‚Ä¢ \n\n ', reply_markup=await kb.materials_kb())

@user.callback_query(F.data == 'clear_materials')
async def cmd_get_idea(callback: CallbackQuery):
    await callback.message.delete()
    global materials
    materials = []
    await callback.message.answer('–ò–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ, —Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å\n–û–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ:\n\n‚Ä¢ \n\n ', reply_markup=await kb.materials_kb())
    
@user.callback_query(F.data.startswith("materials_add_"))
async def added_get_callback(callback: CallbackQuery, state: FSMContext):
    global materials
    
    data = callback.data.split("_")[-1]
    text = callback.message.text
    
    text, materials, edit = await clear_text(data, materials)
    if edit:
        await callback.message.edit_text(
            text=text,
            reply_markup=await kb.materials_kb()
        )
    

@user.callback_query(F.data == 'accept_materials')
async def cmd_get_idea(callback: CallbackQuery):
    await callback.message.delete()
    global materials
    ideas = await req.find_similar_crafts(materials)
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ü–æ–¥–µ–ª–∫—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö', reply_markup=await kb.ideas_kb(ideas))

@user.callback_query(F.data.startswith("idea_"))
async def added_get_callback(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split("_")[1]
    text = await req.revert_idea_to_text(data)
    await callback.message.answer(text, reply_markup=await kb.favorites_kb(callback.from_user.id, data, True))
    
@user.callback_query(F.data.startswith("favorite_"))
async def added_get_callback(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split("_")[1]
    text = callback.message.text + '\n'
    a = await req.add_to_favorite(iid=data,tg_id=callback.from_user.id)
    if not a:
        await callback.message.answer('–≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')
    await callback.message.edit_text(
            text=text,
            reply_markup=await kb.favorites_kb(callback.from_user.id, data, False))
    
@user.callback_query(F.data.startswith("unfavorite_"))
async def added_get_callback(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split("_")[1]
    text = callback.message.text + '\n'
    a = await req.delete_favorite(iid=data,tg_id=callback.from_user.id)
    if not a:
        await callback.message.answer('–≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')
    await callback.message.edit_text(
            text=text,
            reply_markup=await kb.favorites_kb(callback.from_user.id, data, True))
    
    
    

    
    
