import logging
import os

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
import app.states as st
import app.database.requests as req
from app.utils import clear_text

logger = logging.getLogger(__name__)
user = Router()

# --- Command Handlers ---

@user.message(Command('id'))
async def cmd_id(message: Message):
    """Sends the user ID."""
    user_id = message.from_user.id
    await message.answer(
        f"–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: `{user_id}` üîë", 
        reply_markup=kb.main_kb,
        parse_mode='MARKDOWN'
    )

@user.message(CommandStart())
async def cmd_start(message: Message):
    """Sends a welcome message."""
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç! ü§ñüéâ"

        "–£–∑–Ω–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å –ø–æ–º–æ—â—å—é /help üìú\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è üöÄ\n"
        "–•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–µ–ª–æ–∫?",
        reply_markup=kb.start_kb
    )

# --- Authorization Handlers ---

@user.callback_query(F.data == 'join_to_account')
async def join_to_account(callback: CallbackQuery):
    """Handles user authorization."""
    await req.create_user(callback.from_user.id)
    await callback.message.answer(
        '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç! üîìüî•', 
        reply_markup=kb.main_kb
    )

@user.callback_query(F.data == 'skip')
async def skip_cmd(callback: CallbackQuery, state: FSMContext):
    """Skips authorization."""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üè†! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.', 
        reply_markup=kb.main_kb
    )

# --- Idea Handlers ---

@user.message(F.text == '–ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ—éüåü')
async def cmd_get_idea(message: Message, state: FSMContext):
    """Starts the material selection process."""
    await message.delete()
    await state.update_data(materials=[])
    await message.answer(
        "–ò–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã üß©:\n\n‚Ä¢ ",
        reply_markup=await kb.materials_kb()
    )

@user.callback_query(F.data == 'clear_materials')
async def cmd_clear_materials(callback: CallbackQuery, state: FSMContext):
    """Clears the material list."""
    await callback.message.delete()
    await state.update_data(materials=[])
    await callback.message.answer(
        "–ò–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã üß©:\n\n‚Ä¢ ",
        reply_markup=await kb.materials_kb()
    )

@user.callback_query(F.data.startswith("materials_add_"))
async def cmd_add_material(callback: CallbackQuery, state: FSMContext):
    """Adds/removes materials from the list."""
    material = callback.data.split("_")[-1]
    user_data = await state.get_data()
    materials = user_data.get('materials', [])

    new_text, new_materials, edited = await clear_text(material, materials)
    if edited:
        await state.update_data(materials=new_materials)
        await callback.message.edit_text(
            text=f"–ú–∞—Ç–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω: {new_text} üõ†Ô∏è", 
            reply_markup=await kb.materials_kb()
        )

@user.callback_query(F.data == 'accept_materials')
async def cmd_accept_materials(callback: CallbackQuery, state: FSMContext):
    """Accepts selected materials and suggests ideas."""
    await callback.message.delete()
    user_data = await state.get_data()
    materials = user_data.get('materials', [])
    ideas = await req.find_best_matching_ideas(materials)
    await callback.message.answer(
        '–ü–æ–¥–±–µ—Ä–∏—Ç–µ –ü–æ–¥–µ–ª–∫—É –∏–∑ –Ω–∞—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π üé®‚ú®:',
        reply_markup=await kb.ideas_kb(ideas)
    )

@user.callback_query(F.data.startswith("idea_"))
async def cmd_show_idea(callback: CallbackQuery, state: FSMContext):
    """Displays the selected idea with a photo and text."""
    idea_id = callback.data.split("_")[1]
    text, image_path = await req.revert_idea_to_text(idea_id)
    status = await req.is_idea_favorite(callback.from_user.id, idea_id)

    if image_path and os.path.exists(image_path):
        try:
            await callback.message.answer_photo(
                photo=FSInputFile(image_path, filename="idea_image.png"), 
                caption=text,
                reply_markup=await kb.favorites_kb(callback.from_user.id, idea_id, status)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            await callback.message.answer(
                text, 
                reply_markup=await kb.favorites_kb(callback.from_user.id, idea_id, status)
            )
    else:
        await callback.message.answer(
            text, 
            reply_markup=await kb.favorites_kb(callback.from_user.id, idea_id, status)
        )

@user.callback_query(F.data.startswith("favorite_"))
async def cmd_favorite_idea(callback: CallbackQuery, state: FSMContext):
    """Adds the idea to favorites and updates the keyboard."""
    idea_id = callback.data.split("_")[1]
    added = await req.add_to_favorite(iid=idea_id, tg_id=callback.from_user.id)

    if not added:
        await callback.message.answer('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! üö´')
        return

    try:
        await callback.message.edit_reply_markup(
            reply_markup=await kb.favorites_kb(callback.from_user.id, idea_id, True)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ): {e}")
        await callback.message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

@user.callback_query(F.data.startswith("unfavorite_"))
async def cmd_unfavorite_idea(callback: CallbackQuery, state: FSMContext):
    """Removes the idea from favorites and updates the keyboard."""
    idea_id = callback.data.split("_")[1]
    removed = await req.delete_favorite(iid=idea_id, tg_id=callback.from_user.id)

    if not removed:
        await callback.message.answer('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! üö´')
        return

    try:
        await callback.message.edit_reply_markup(
            reply_markup=await kb.favorites_kb(callback.from_user.id, idea_id, False)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ): {e}")
        await callback.message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

# --- Soap Creation Handlers ---

@user.message(F.text == '–°–æ–∑–¥–∞—Ç—å –º—ã–ª–æüßº')
async def create_soap_cmd(message: Message, state: FSMContext):
    """Starts the soap creation process."""
    await message.delete()
    await message.answer(
        '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –º—ã–ª–∞, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤!',
        reply_markup=kb.empty_kb
    )
    await state.set_state(st.QuestionsFsm.color)
    await message.answer(
        '–°–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ —ç—Ç–æ —Ü–≤–µ—Ç, –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –µ–≥–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ 1 –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö',
        reply_markup=await kb.get_cb_by_status_questions('color')
    )

@user.callback_query(F.data.startswith("answer_1_"))
async def answer_color(callback: CallbackQuery, state: FSMContext):
    """Handles the color question."""
    await callback.message.delete()
    answer_id = callback.data.split("_")[2]
    await state.update_data(color=answer_id)
    await state.set_state(st.QuestionsFsm.form)
    await callback.message.answer(
        '–ù–µ–º–µ–Ω–µ–µ –≤–∞–∂–Ω–∞ –∏ –§–æ—Ä–º–∞, –≤–µ–¥—å –æ–Ω–∞ —Ä–∞–¥—É–µ—Ç –≥–ª–∞–∑ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–æ–±–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º—ã–ª–æ–º',
        reply_markup=await kb.get_cb_by_status_questions('form')
    )

@user.callback_query(F.data.startswith("answer_2_"))
async def answer_form(callback: CallbackQuery, state: FSMContext):
    """Handles the form question."""
    await callback.message.delete()
    answer_id = callback.data.split("_")[2]
    await state.update_data(form=answer_id)
    await state.set_state(st.QuestionsFsm.additives)
    await callback.message.answer(
        '–ù–∞ –ø–æ—Å–ª–µ–¥–æ–∫, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –≤–∞—à–µ–º—É –º—ã–ª—É –∏–∑ —Å–ø–∏—Å–∫–∞:\n',
        reply_markup=await kb.get_cb_by_status_questions('additives')
    )

@user.callback_query(F.data.startswith("answer_3_"))
async def answer_additives(callback: CallbackQuery, state: FSMContext):
    """Handles the additives question."""
    await callback.message.delete()
    answer_id = callback.data.split("_")[2]
    await state.update_data(additives=answer_id)
    data = await state.get_data()
    path = await req.get_soap_img(data)
    text = await req.get_soap_text(data)

    if path and os.path.exists(path):
        try:
            await callback.message.answer_photo(
                photo=FSInputFile(path, filename="soap_image.png"), 
                caption=text
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            await callback.message.answer(
                f'–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –º—ã —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –µ—ë —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º!\n{text}'
            )

    await state.clear()

# --- Profile Handlers ---

@user.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—åüè†')
async def profile_cmd(message: Message, state: FSMContext):
    """Displays the user profile."""
    await message.delete()
    user = await req.is_user_auth(message.from_user.id)
    if not user:
        await message.answer('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è?')
        return
    count = await req.get_count_user_favorite(message.from_user.id)
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {message.from_user.id} üëã
–ü–æ–¥–µ–ª–æ–∫ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º:\n{count}',
        reply_markup=await kb.profile_kb(message.from_user.id)
    )

@user.callback_query(F.data == 'delete_account')
async def delete_account_prompt(callback: CallbackQuery, state: FSMContext):
    """Prompts account deletion confirmation."""
    await callback.message.delete()
    await callback.message.answer(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!',
        reply_markup=kb.delete_account_kb
    )

@user.callback_query(F.data == 'submit_delete_account')
async def delete_account(callback: CallbackQuery, state: FSMContext):
    """Deletes the user account."""
    await callback.message.delete()
    await req.delete_my_account(tg_id=callback.from_user.id)
    await callback.answer('–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω!')
