import logging

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
import app.states as st
import app.database.requests as req
from app.utils import clear_text


logger = logging.getLogger(__name__)
user = Router()


# ----- /id -----
@user.message(Command('id'))
async def cmd_id(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    await message.answer(
        f"`{user_id}`",
        reply_markup=kb.main_kb,
        parse_mode='MARKDOWN'
    )

# ----- /start -----
@user.message(CommandStart())
async def cmd_start(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç! ü§ñ\n"
        "–£–∑–Ω–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å –ø–æ–º–æ—â—å—é /help üìú\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è üöÄ\n"
        "–•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–µ–ª–æ–∫?",
        reply_markup=kb.start_kb
    )

# ----- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è -----
@user.callback_query(F.data == 'join_to_account')
async def join_to_account(callback: CallbackQuery):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await req.create_user(callback.from_user.id)
    await callback.message.answer(
        '–í—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç! üîìüî•', 
        reply_markup=kb.main_kb
    )

@user.callback_query(F.data == 'skip')
async def skip_cmd(callback: CallbackQuery,state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üè†!', 
        reply_markup=kb.main_kb
    )

# ----- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–∏ -----
@user.message(F.text == '–ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ—éüåü')
async def cmd_get_idea(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""
    await message.delete()
    await state.update_data(materials=[])
    await message.answer(
        "–ò–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã üß©:\n\n‚Ä¢ ",
        reply_markup=await kb.materials_kb()
    )

@user.callback_query(F.data == 'clear_materials')
async def cmd_clear_materials(callback: CallbackQuery, state: FSMContext):
    """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""
    await callback.message.delete()
    await state.update_data(materials=[])
    await callback.message.answer(
        "–ò–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã üß©:\n\n‚Ä¢ ",
        reply_markup=await kb.materials_kb()
    )

@user.callback_query(F.data.startswith("materials_add_"))
async def cmd_add_material(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    material = callback.data.split("_")[-1]
    user_data = await state.get_data()
    materials = user_data.get('materials', [])

    new_text, new_materials, edited = await clear_text(material, materials)
    if edited:
        await state.update_data(materials=new_materials)
        await callback.message.edit_text(
            text=new_text,
            reply_markup=await kb.materials_kb()
        )

@user.callback_query(F.data == 'accept_materials')
async def cmd_accept_materials(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–Ω—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏."""
    await callback.message.delete()
    user_data = await state.get_data()
    materials = user_data.get('materials', [])
    ideas = await req.find_best_matching_ideas(materials)
    await callback.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –ü–æ–¥–µ–ª–∫—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö üé®:',
        reply_markup=await kb.ideas_kb(ideas)
    )

@user.callback_query(F.data.startswith("idea_"))
async def cmd_show_idea(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–¥–µ—é."""
    idea_id = callback.data.split("_")[1]
    text = await req.revert_idea_to_text(idea_id)
    await callback.message.answer(
        text, 
        reply_markup=await kb.favorites_kb(callback.from_user.id, idea_id, True)
    )

@user.callback_query(F.data.startswith("favorite_"))
async def cmd_favorite_idea(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."""
    idea_id = callback.data.split("_")[1]
    text = callback.message.text + '\n'
    added = await req.add_to_favorite(iid=idea_id, tg_id=callback.from_user.id)
    if not added:
        await callback.message.answer('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! üö´')
    else:
        await callback.message.edit_text(
            text=text,
            reply_markup=await kb.favorites_kb(callback.from_user.id, idea_id, False)
        )

@user.callback_query(F.data.startswith("unfavorite_"))
async def cmd_unfavorite_idea(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –∏–¥–µ—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ."""
    idea_id = callback.data.split("_")[1]
    text = callback.message.text + '\n'
    removed = await req.delete_favorite(iid=idea_id, tg_id=callback.from_user.id)
    if not removed:
        await callback.message.answer('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! üö´')
    else:
        await callback.message.edit_text(
            text=text,
            reply_markup=await kb.favorites_kb(callback.from_user.id, idea_id, True)
        )
